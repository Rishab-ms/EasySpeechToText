// Mocks generated by Mockito 5.4.4 from annotations
// in easy_speech_to_text/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:easy_speech_to_text/locale_name.dart' as _i5;
import 'package:easy_speech_to_text/speech_engine.dart' as _i4;
import 'package:easy_speech_to_text/src/easy_speech_to_text_platform_interface.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EasySpeechToTextPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockEasySpeechToTextPlatform extends _i1.Mock
    implements _i2.EasySpeechToTextPlatform {
  @override
  _i3.Stream<dynamic> get onSpeechResult => (super.noSuchMethod(
        Invocation.getter(#onSpeechResult),
        returnValue: _i3.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);

  @override
  _i3.Future<void> initialize({
    required _i4.SpeechEngine? engine,
    Map<String, dynamic>? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #engine: engine,
            #options: options,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> startListening({
    String? localeId,
    List<String>? customWords,
    bool? partialResults = true,
    Duration? pauseFor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startListening,
          [],
          {
            #localeId: localeId,
            #customWords: customWords,
            #partialResults: partialResults,
            #pauseFor: pauseFor,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> stopListening() => (super.noSuchMethod(
        Invocation.method(
          #stopListening,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelListening() => (super.noSuchMethod(
        Invocation.method(
          #cancelListening,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> transcribe({
    required String? filePath,
    String? localeId,
    List<String>? customWords,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transcribe,
          [],
          {
            #filePath: filePath,
            #localeId: localeId,
            #customWords: customWords,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  void setCustomWords(List<String>? words) => super.noSuchMethod(
        Invocation.method(
          #setCustomWords,
          [words],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<List<_i5.LocaleName>> getAvailableLanguages() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableLanguages,
          [],
        ),
        returnValue: _i3.Future<List<_i5.LocaleName>>.value(<_i5.LocaleName>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.LocaleName>>.value(<_i5.LocaleName>[]),
      ) as _i3.Future<List<_i5.LocaleName>>);
}
